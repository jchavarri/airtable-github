// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/src/Express.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Process = require("process");
var Airtable = require("airtable");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var GitHub$AirtableGithub = require("./GitHub.bs.js");

function $great$great(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function raiseIfNone(message, param) {
  if (param) {
    return param[0];
  } else {
    return Pervasives.failwith(message);
  }
}

var apiKey = raiseIfNone("Airtable API key missing", Js_primitive.undefined_to_opt(Process.env["AIRTABLE_API_KEY"]));

var dbId = raiseIfNone("Airtable database id missing", Js_primitive.undefined_to_opt(Process.env["AIRTABLE_DB_ID"]));

var tableName = raiseIfNone("Airtable database id missing", Js_primitive.undefined_to_opt(Process.env["AIRTABLE_TABLE_NAME"]));

var base = new Airtable({
        apiKey: apiKey
      }).base(dbId);

var table = base(tableName);

function update(recordId, status) {
  table.update(recordId, Js_dict.fromArray(/* array */[/* tuple */[
              "Status",
              status
            ]]));
  return /* () */0;
}

function makeSuccessJson() {
  var json = { };
  json["success"] = true;
  return json;
}

function jsonDecoder(json) {
  return {
          action: GitHub$AirtableGithub.action(Json_decode.field("action", Json_decode.string, json)),
          issue: Json_decode.field("issue", GitHub$AirtableGithub.issue, json)
        };
}

var Body = /* module */[/* jsonDecoder */jsonDecoder];

var app = Express.express(/* () */0);

Curry._3(Express.App[/* useOnPath */2], app, "/", Express.Middleware[/* json */0](/* None */0, /* None */0, /* Some */[Express.ByteLimit[/* mb */2](5.0)], /* () */0));

Curry._3(Express.App[/* get */4], app, "/test", Express.Middleware[/* from */3]((function (_, _$1) {
            var partial_arg = makeSuccessJson(/* () */0);
            var partial_arg$1 = Express.Response[/* sendJson */3];
            return (function (param) {
                return partial_arg$1(partial_arg, param);
              });
          })));

Curry._3(Express.App[/* post */7], app, "/postreceive", Express.Middleware[/* from */3]((function () {
            var partial_arg = Express.Request[/* bodyJSON */3];
            var partial_arg$1 = function (param) {
              return raiseIfNone("Body is none", Curry._1(partial_arg, param));
            };
            var partial_arg$2 = function (param) {
              return jsonDecoder(Curry._1(partial_arg$1, param));
            };
            return (function (param) {
                var decoded = Curry._1(partial_arg$2, param);
                console.log(decoded);
                var issueNumber = decoded.issue.number;
                var selectResults = table.select({
                      filterByFormula: "(IssueNumber=" + (String(issueNumber) + ")")
                    });
                var resultsHandler = function (err, records) {
                  console.log(err);
                  if (records.length !== 1) {
                    return /* () */0;
                  } else {
                    var record = records[0];
                    var match = decoded.action;
                    switch (match) {
                      case 0 : 
                      case 1 : 
                      case 2 : 
                      case 3 : 
                      case 5 : 
                      case 6 : 
                      case 7 : 
                          return /* () */0;
                      case 8 : 
                          return update(record.id, "Closed");
                      case 4 : 
                      case 9 : 
                          return update(record.id, "Open");
                      
                    }
                  }
                };
                selectResults.firstPage(resultsHandler);
                var partial_arg$3 = makeSuccessJson(/* () */0);
                var partial_arg$4 = Express.Response[/* sendJson */3];
                return (function (param) {
                    return partial_arg$4(partial_arg$3, param);
                  });
              });
          })));

function onListen(port, e) {
  var exit = 0;
  var val;
  try {
    val = e;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      console.log(exn[1]);
      Process.exit(1);
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    console.log("Listening at http://127.0.0.1:" + Pervasives.string_of_int(port));
    return /* () */0;
  }
  
}

Express.App[/* listen */19](app, /* None */0, /* Some */[(function (param) {
          return onListen(3000, param);
        })], /* () */0);

exports.$great$great = $great$great;
exports.raiseIfNone = raiseIfNone;
exports.apiKey = apiKey;
exports.dbId = dbId;
exports.tableName = tableName;
exports.base = base;
exports.table = table;
exports.update = update;
exports.makeSuccessJson = makeSuccessJson;
exports.Body = Body;
exports.app = app;
exports.onListen = onListen;
/* apiKey Not a pure module */
